from datetime import datetime
from typing import Literal, Any, List, Dict

from pydantic import BaseModel


class MessageRequest(BaseModel):
    """Container for a single raw message coming from a client."""
    message: str #: str : The text body of the message.


class MessageSchema(BaseModel):
    """Normalized message representation used throughout conversation payloads."""
    id: str | None = None #: :class:`str`, optional : Unique message identifier. If omitted, it can be generated by the backend.
    datetime: datetime #: :class:`datetime.datetime` : Message timestamp.
    role: Literal["user", "assistant", "admin"] #: :class:`typing.Literal`[{"user", "assistant", "admin"}] : Originator role of the message.
    content: str #: str : Message content.
    metadata: Any | None = None #: :class:`typing.Any`, optional : Additional structured or unstructured metadata; forwarded unchanged.


class ConversationRequest(BaseModel):
    """Schema describing a conversation state and the new query to process."""
    id: str #: str : Unique identifier of the conversation.
    chatbotId: str #: str : Identifier of the target chatbot/agent.
    question: MessageSchema #: :class:`MessageSchema` : The question/message to answer.
    history: List[MessageSchema] #: :class:`typing.List`[:class:`~src.utils.chat.MessageSchema`] : Message history.


class ChatRequest(BaseModel):
    """Top-level request for a chat inference call."""
    user: str #: str : Human-readable username or handle.
    user_id: str | None = None #: str, optional : Stable user identifier, if available.
    conversation: ConversationRequest #: :class:`~src.utils.chat.ConversationRequest` : The conversation payload containing the current question and history.


class ChatResponse(BaseModel):
    """Standard response envelope returned by the chat service."""
    role: Literal["user", "assistant", "admin"] #: :class:`typing.Literal`[{"user", "assistant", "admin"}] : Role of the responder; typically ``"assistant"``.
    content: str #: str : Generated text produced in the response.
    metadata: Dict #: :class:`typing.Dict` : Additional response metadata.
    is_faulted: bool = False #: bool, default ``False`` :  Whether the request completed with an application error.
